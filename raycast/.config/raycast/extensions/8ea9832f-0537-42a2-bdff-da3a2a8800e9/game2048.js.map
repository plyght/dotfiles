{
  "version": 3,
  "sources": ["../src/game2048.jsx", "../node_modules/svg64/src/svg64.ts"],
  "sourcesContent": ["import { Action, ActionPanel, Toast, showToast, LocalStorage, Icon, Detail, confirmAlert, Alert } from \"@raycast/api\";\nimport svg64 from \"svg64\";\nimport { useState, useRef, useEffect } from \"react\";\n\nexport default function Game2048() {\n  let TEST_BOARD = [\n    [\"2\", \"4\", \"8\", \"16\"],\n    [\"32\", \"64\", \"128\", \"256\"],\n    [\"512\", \"1024\", \"2048\", \"4096\"],\n    [\"8192\", \"16384\", \"32768\", \"65536\"],\n  ];\n\n  const Status = {\n    PLAYING: \"playing\",\n    GAMEOVER: \"gameover\",\n  };\n\n  let status = useRef(Status.PLAYING);\n\n  let generateEmptyBoard = () =>\n    Array(4)\n      .fill()\n      .map(() =>\n        Array(4)\n          .fill()\n          .map(() => \"\"),\n      );\n\n  let [board, setBoard] = useState(() => {\n    let emptyBoard = generateEmptyBoard();\n    let [i, j] = [Math.floor(Math.random() * 4), Math.floor(Math.random() * 4)];\n    emptyBoard[i][j] = Math.random() < 0.1 ? \"4\" : \"2\";\n    return emptyBoard;\n  });\n\n  let checkGameOver = (board) => {\n    if (board.every((row) => row.every((cell) => cell !== \"\"))) {\n      let gameOver = true;\n      for (let i in board) {\n        for (let j in board[i]) {\n          let diffs = [\n            [-1, 0],\n            [1, 0],\n            [0, -1],\n            [0, 1],\n          ];\n\n          for (let [di, dj] of diffs) {\n            if (board[parseInt(i) + di] && board[parseInt(i) + di][parseInt(j) + dj] === board[i][j]) {\n              gameOver = false;\n              break;\n            }\n          }\n        }\n      }\n      if (gameOver) {\n        showToast({\n          title: \"Game Over\",\n          style: Toast.Style.Failure,\n        });\n        status.current = Status.GAMEOVER;\n      }\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      let savedBoard = await LocalStorage.getItem(\"2048board\");\n\n      if (savedBoard) {\n        savedBoard = JSON.parse(savedBoard);\n        checkGameOver(savedBoard);\n        setBoard(savedBoard);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      await LocalStorage.setItem(\"2048board\", JSON.stringify(board));\n    })();\n  }, [board]);\n\n  let compress = (board) => {\n    let hasChanged = false;\n    let newBoard = generateEmptyBoard();\n    for (let i in newBoard) {\n      let pos = 0;\n      for (let j in newBoard[i]) {\n        if (board[i][j] !== \"\") {\n          newBoard[i][pos] = board[i][j];\n          if (pos != j) {\n            hasChanged = true;\n          }\n          pos++;\n        }\n      }\n    }\n    return [newBoard, hasChanged];\n  };\n\n  let merge = (board) => {\n    let hasChanged = false;\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (board[i][j] == board[i][j + 1] && board[i][j] !== \"\") {\n          board[i][j] = String(board[i][j] * 2);\n          board[i][j + 1] = \"\";\n          hasChanged = true;\n        }\n      }\n    }\n    return [board, hasChanged];\n  };\n\n  let generateBoard = (board) => {\n    let svg = `\n    <svg width=\"2250\" height=\"1000\">\n    <rect x=\"625\" y=\"0\" width=\"1000\" height=\"1000\" fill=\"#BCAC9F\" rx=\"20\" />\n    `;\n    for (let i in board) {\n      let row = board[i];\n      for (let j in row) {\n        let square = row[j];\n\n        let colors = {\n          2: {\n            tile: \"#EEE4DA\",\n            color: \"#776E65\",\n          },\n          4: {\n            tile: \"#EEDEC9\",\n            color: \"#776E65\",\n          },\n          8: {\n            tile: \"#F2B178\",\n            color: \"#FFFFFF\",\n          },\n          16: {\n            tile: \"#EC8E53\",\n            color: \"#FFFFFF\",\n          },\n          32: {\n            tile: \"#F47D60\",\n            color: \"#FFFFFF\",\n          },\n          64: {\n            tile: \"#F65E3B\",\n            color: \"#FFFFFF\",\n          },\n          128: {\n            tile: \"#EDCF72\",\n            color: \"#FFFFFF\",\n          },\n          256: {\n            tile: \"#F2D04B\",\n            color: \"#FFFFFF\",\n          },\n          512: {\n            tile: \"#EFC850\",\n            color: \"#FFFFFF\",\n          },\n          1024: {\n            tile: \"#EDC53F\",\n            color: \"#FFFFFF\",\n          },\n          2048: {\n            tile: \"#EDC22E\",\n            color: \"#FFFFFF\",\n          },\n        };\n\n        let size = Math.log(square.length) / Math.log(0.96) + 100;\n\n        svg += `\n        <rect x=\"${(30 + 213) * j + 30 + 625}\" y=\"${(30 + 213) * i + 30}\" width=\"213\" height=\"213\" fill=\"#${\n          square === \"\" ? \"#CCC1B4\" : colors[square]?.tile ?? \"#3C3A31\"\n        }\" rx=\"20\" />\n        ${\n          square !== \"\" &&\n          `\n          <text x=\"${(30 + 213) * j + 30 + 625 + 213 / 2}\" y=\"${\n            (30 + 213) * i + 30 + 213 / 2 + size / 2\n          }\" height=\"213\" width=\"213\" font-size=\"${size}\" fill=\"#${\n            colors[square]?.color ?? \"#FFFFFF\"\n          }\" dominant-baseline=\"middle\" text-anchor=\"middle\" startoffset=\"1\" font-family=\"Helvetica Neue\" font-weight=\"bold\">${square}</text>\n        `\n        }\n        `;\n      }\n    }\n    svg += \"</svg>\";\n\n    return `![](${svg64(svg)})`;\n  };\n\n  let addNewTile = (board) => {\n    let count = 0;\n    let result = null;\n\n    for (let i in board) {\n      for (let j in board[i]) {\n        if (board[i][j] === \"\") {\n          count++;\n          if (Math.random() < 1 / count) result = [i, j];\n        }\n      }\n    }\n\n    if (result !== null) {\n      let newBoard = structuredClone(board);\n      newBoard[result[0]][result[1]] = Math.random() < 0.1 ? \"4\" : \"2\";\n      checkGameOver(newBoard);\n      return newBoard;\n    }\n  };\n\n  const replay = () => {\n    let newBoard = generateEmptyBoard();\n    let [i, j] = [Math.floor(Math.random() * 4), Math.floor(Math.random() * 4)];\n    newBoard[i][j] = Math.random() < 0.1 ? \"4\" : \"2\";\n\n    setBoard(newBoard);\n    status.current = Status.PLAYING;\n  };\n\n  const rotateLeft = (matrix) => matrix[0].map((_, i) => matrix.map((row) => row[i])).reverse();\n  const rotateRight = (matrix) => matrix[0].map((_, i) => matrix.map((row) => row[i])).map((row) => row.reverse());\n  const rotate180 = (matrix) => matrix.map((row) => row.reverse()).reverse();\n\n  let shiftLeft = (previousBoard) => {\n    let [compressedBoard, hasChanged1] = compress(previousBoard);\n    let [mergedBoard, hasChanged2] = merge(compressedBoard);\n    let [newBoard, _] = compress(mergedBoard);\n\n    if (hasChanged1 || hasChanged2) {\n      newBoard = addNewTile(newBoard);\n    }\n    return newBoard;\n  };\n\n  let shiftUp = (previousBoard) => rotateRight(shiftLeft(rotateLeft(previousBoard)));\n\n  let shiftDown = (previousBoard) => rotateLeft(shiftLeft(rotateRight(previousBoard)));\n\n  let shiftRight = (previousBoard) => rotate180(shiftLeft(rotate180(previousBoard)));\n\n  return (\n    <Detail\n      actions={\n        <ActionPanel>\n          {status.current === Status.GAMEOVER ? (\n            <Action title=\"Replay\" onAction={replay} />\n          ) : (\n            <>\n              <Action\n                title=\"Restart\"\n                icon={Icon.RotateClockwise}\n                shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"r\" }}\n                onAction={async () => {\n                  await confirmAlert({\n                    title: \"Are you sure you want to restart?\",\n                    primaryAction: {\n                      title: \"Restart\",\n                      style: Alert.ActionStyle.Destructive,\n                      onAction: () => {\n                        replay();\n                      },\n                    },\n                  });\n                }}\n              />\n              <Action\n                title=\"Shift Left\"\n                shortcut={{ modifiers: [\"shift\"], key: \"arrowLeft\" }}\n                icon={Icon.ArrowLeft}\n                onAction={() => {\n                  setBoard(shiftLeft);\n                }}\n              />\n              <Action\n                title=\"Shift Right\"\n                shortcut={{ modifiers: [\"shift\"], key: \"arrowRight\" }}\n                icon={Icon.ArrowRight}\n                onAction={() => {\n                  setBoard(shiftRight);\n                }}\n              />\n              <Action\n                title=\"Shift Up\"\n                shortcut={{ modifiers: [\"shift\"], key: \"arrowUp\" }}\n                icon={Icon.ArrowUp}\n                onAction={() => {\n                  setBoard(shiftUp);\n                }}\n              />\n              <Action\n                title=\"Shift Down\"\n                shortcut={{ modifiers: [\"shift\"], key: \"arrowDown\" }}\n                icon={Icon.ArrowDown}\n                onAction={() => {\n                  setBoard(shiftDown);\n                }}\n              />\n            </>\n          )}\n        </ActionPanel>\n      }\n      markdown={generateBoard(board)}\n    />\n  );\n}\n", "// prettier-ignore\nconst CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst PREFIX = 'data:image/svg+xml;base64,';\n\nexport const utf8Encode = (input: string): string => {\n\tinput = input.replace(/\\r\\n/g, '\\n');\n\n\tlet i = 0;\n\tlet output = '';\n\n\tfor (; i < input.length; i++) {\n\t\tconst c = input.charCodeAt(i);\n\n\t\tif (c < 128) {\n\t\t\toutput += String.fromCharCode(c);\n\t\t} else if (c > 127 && c < 2048) {\n\t\t\toutput += String.fromCharCode((c >> 6) | 192);\n\t\t\toutput += String.fromCharCode((c & 63) | 128);\n\t\t} else {\n\t\t\toutput += String.fromCharCode((c >> 12) | 224);\n\t\t\toutput += String.fromCharCode(((c >> 6) & 63) | 128);\n\t\t\toutput += String.fromCharCode((c & 63) | 128);\n\t\t}\n\t}\n\n\treturn output;\n};\n\nexport const encode = (input: string): string => {\n\tlet i = 0;\n\tlet chr1: number;\n\tlet chr2: number;\n\tlet chr3: number;\n\tlet enc1: number;\n\tlet enc2: number;\n\tlet enc3: number;\n\tlet enc4: number;\n\tlet output = '';\n\n\tinput = utf8Encode(input);\n\n\twhile (i < input.length) {\n\t\tchr1 = input.charCodeAt(i++);\n\t\tchr2 = input.charCodeAt(i++);\n\t\tchr3 = input.charCodeAt(i++);\n\n\t\tenc1 = chr1 >> 2;\n\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\tenc4 = chr3 & 63;\n\n\t\tif (isNaN(chr2)) {\n\t\t\tenc3 = enc4 = 64;\n\t\t} else if (isNaN(chr3)) {\n\t\t\tenc4 = 64;\n\t\t}\n\n\t\toutput = output + CHARS.charAt(enc1) + CHARS.charAt(enc2) + CHARS.charAt(enc3) + CHARS.charAt(enc4);\n\t}\n\n\treturn output;\n};\n\nexport const detectInputType = (input: string | SVGElement): 'string' | 'element' | void => {\n\tif (typeof input === 'string') {\n\t\treturn 'string';\n\t}\n\n\tif (typeof SVGElement !== 'undefined' && input instanceof SVGElement) {\n\t\treturn 'element';\n\t}\n};\n\nexport const getBase64 = (input: string) => PREFIX + encode(input);\n\nexport const convertElement = (input: SVGElement): string => getBase64(new XMLSerializer().serializeToString(input));\n\nexport const svg64 = (input: string | SVGElement): string => {\n\tconst type = detectInputType(input);\n\n\tswitch (type) {\n\t\tcase 'string':\n\t\t\treturn getBase64(input as string);\n\n\t\tcase 'element':\n\t\t\treturn convertElement(input as SVGElement);\n\n\t\tdefault:\n\t\t\treturn input as string;\n\t}\n};\n\nexport default svg64;\n"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAuG,wBCCvG,IAAMC,EAAQ,oEAGDC,EAAcC,GAAAA,CAC1BA,EAAQA,EAAMC,QAAQ,QAAS;CAAA,EAE/B,IAAIC,EAAI,EAAAC,EACK,GAEb,KAAOD,EAAIF,EAAMI,OAAQF,IAAK,CAC7B,IAAMG,EAAIL,EAAMM,WAAWJ,CAAAA,EAEvBG,EAAI,IACPE,GAAUC,OAAOC,aAAaJ,CAAAA,EACpBA,EAAI,KAAOA,EAAI,MACzBE,GAAUC,OAAOC,aAAcJ,GAAK,EAAK,GAAA,EACzCE,GAAUC,OAAOC,aAAkB,GAAJJ,EAAU,GAAA,IAEzCE,GAAUC,OAAOC,aAAcJ,GAAK,GAAM,GAAA,EAC1CE,GAAUC,OAAOC,aAAeJ,GAAK,EAAK,GAAM,GAAA,EAChDE,GAAUC,OAAOC,aAAkB,GAAJJ,EAAU,GAAA,GAI3C,OAAOE,CAAAA,EAAAA,EAGeP,GAAAA,CACtB,IACIU,EAAAA,EAEYC,EACZC,EACAC,EACYC,EACAC,EAPZb,EAAI,EAQJK,EAAS,GAIb,IAFAP,EAAQD,EAAWC,CAAAA,EAEZE,EAAIF,EAAMI,QAChBM,EAAOV,EAAMM,WAAWJ,GAAAA,EACxBc,EAAOhB,EAAMM,WAAWJ,GAAAA,EACxBS,EAAOX,EAAMM,WAAWJ,GAAAA,EAExBU,EAAOF,GAAQ,EACfG,GAAgB,EAAPH,IAAa,EAAMM,GAAQ,EACpCF,GAAgB,GAAPE,IAAc,EAAML,GAAQ,EACrCI,EAAc,GAAPJ,EAEHM,MAAMD,CAAAA,EACTF,EAAOC,EAAO,GACJE,MAAMN,CAAAA,IAChBI,EAAO,IAGRR,EAASA,EAAST,EAAMoB,OAAON,CAAAA,EAAQd,EAAMoB,OAAOL,CAAAA,EAAQf,EAAMoB,OAAOJ,CAAAA,EAAQhB,EAAMoB,OAAOH,CAAAA,EAG/F,OAAAI,CAAA,EAG2BC,EAAIpB,GACV,OAALA,GAAK,SACb,SAGkB,OAALqB,WAAK,KAAerB,aAAAA,WACjC,UAAA,OAIasB,EAAItB,GAvEX,6BAuEsCuB,EAAOvB,CAAAA,EAE/CwB,EAAkBxB,GAA8BsB,EAAU,IAAIG,gBAAgBC,kBAAkB1B,CAAAA,CAAAA,EAEhG2B,EAAS3B,GAAAA,CAGrB,OAFaoB,EAAgBpB,CAAAA,EAAAA,CAG5B,IAAK,SACJ,OAAgBsB,EAACtB,CAAAA,EAElB,IAAK,UACJ,OAAA4B,EAAsB5B,CAAAA,EAEvB,QACC,OAAsBA,CAAAA,CAAC,EDtF1B,IAAA6B,EAA4C,iBAE7B,SAARC,GAA4B,CACjC,IAAIC,EAAa,CACf,CAAC,IAAK,IAAK,IAAK,IAAI,EACpB,CAAC,KAAM,KAAM,MAAO,KAAK,EACzB,CAAC,MAAO,OAAQ,OAAQ,MAAM,EAC9B,CAAC,OAAQ,QAAS,QAAS,OAAO,CACpC,EAEMC,EAAS,CACb,QAAS,UACT,SAAU,UACZ,EAEIC,KAAS,UAAOD,EAAO,OAAO,EAE9BE,EAAqB,IACvB,MAAM,CAAC,EACJ,KAAK,EACL,IAAI,IACH,MAAM,CAAC,EACJ,KAAK,EACL,IAAI,IAAM,EAAE,CACjB,EAEA,CAACC,EAAOC,CAAQ,KAAI,YAAS,IAAM,CACrC,IAAIC,EAAaH,EAAmB,EAChC,CAAC,EAAGI,CAAC,EAAI,CAAC,KAAK,MAAM,KAAK,OAAO,EAAI,CAAC,EAAG,KAAK,MAAM,KAAK,OAAO,EAAI,CAAC,CAAC,EAC1E,OAAAD,EAAW,CAAC,EAAEC,CAAC,EAAI,KAAK,OAAO,EAAI,GAAM,IAAM,IACxCD,CACT,CAAC,EAEGE,EAAiBJ,GAAU,CAC7B,GAAIA,EAAM,MAAOK,GAAQA,EAAI,MAAOC,GAASA,IAAS,EAAE,CAAC,EAAG,CAC1D,IAAIC,EAAW,GACf,QAASC,KAAKR,EACZ,QAASG,KAAKH,EAAMQ,CAAC,EAAG,CACtB,IAAIC,EAAQ,CACV,CAAC,GAAI,CAAC,EACN,CAAC,EAAG,CAAC,EACL,CAAC,EAAG,EAAE,EACN,CAAC,EAAG,CAAC,CACP,EAEA,OAAS,CAACC,EAAIC,CAAE,IAAKF,EACnB,GAAIT,EAAM,SAASQ,CAAC,EAAIE,CAAE,GAAKV,EAAM,SAASQ,CAAC,EAAIE,CAAE,EAAE,SAASP,CAAC,EAAIQ,CAAE,IAAMX,EAAMQ,CAAC,EAAEL,CAAC,EAAG,CACxFI,EAAW,GACX,OAKJA,OACF,aAAU,CACR,MAAO,YACP,MAAO,QAAM,MAAM,OACrB,CAAC,EACDT,EAAO,QAAUD,EAAO,UAG9B,KAEA,aAAU,IAAM,EACb,SAAY,CACX,IAAIe,EAAa,MAAM,eAAa,QAAQ,WAAW,EAEnDA,IACFA,EAAa,KAAK,MAAMA,CAAU,EAClCR,EAAcQ,CAAU,EACxBX,EAASW,CAAU,EAEvB,GAAG,CACL,EAAG,CAAC,CAAC,KAEL,aAAU,IAAM,EACb,SACC,MAAM,eAAa,QAAQ,YAAa,KAAK,UAAUZ,CAAK,CAAC,IAEjE,EAAG,CAACA,CAAK,CAAC,EAEV,IAAIa,EAAYb,GAAU,CACxB,IAAIc,EAAa,GACbC,EAAWhB,EAAmB,EAClC,QAASS,KAAKO,EAAU,CACtB,IAAIC,EAAM,EACV,QAASb,KAAKY,EAASP,CAAC,EAClBR,EAAMQ,CAAC,EAAEL,CAAC,IAAM,KAClBY,EAASP,CAAC,EAAEQ,CAAG,EAAIhB,EAAMQ,CAAC,EAAEL,CAAC,EACzBa,GAAOb,IACTW,EAAa,IAEfE,KAIN,MAAO,CAACD,EAAUD,CAAU,CAC9B,EAEIG,EAASjB,GAAU,CACrB,IAAIc,EAAa,GACjB,QAASN,EAAI,EAAGA,EAAI,EAAGA,IACrB,QAASL,EAAI,EAAGA,EAAI,EAAGA,IACjBH,EAAMQ,CAAC,EAAEL,CAAC,GAAKH,EAAMQ,CAAC,EAAEL,EAAI,CAAC,GAAKH,EAAMQ,CAAC,EAAEL,CAAC,IAAM,KACpDH,EAAMQ,CAAC,EAAEL,CAAC,EAAI,OAAOH,EAAMQ,CAAC,EAAEL,CAAC,EAAI,CAAC,EACpCH,EAAMQ,CAAC,EAAEL,EAAI,CAAC,EAAI,GAClBW,EAAa,IAInB,MAAO,CAACd,EAAOc,CAAU,CAC3B,EAEII,EAAiBlB,GAAU,CAC7B,IAAImB,EAAM;AAAA;AAAA;AAAA,MAIV,QAASX,KAAKR,EAAO,CACnB,IAAIK,EAAML,EAAMQ,CAAC,EACjB,QAASL,KAAKE,EAAK,CACjB,IAAIe,EAASf,EAAIF,CAAC,EAEdkB,EAAS,CACX,EAAG,CACD,KAAM,UACN,MAAO,SACT,EACA,EAAG,CACD,KAAM,UACN,MAAO,SACT,EACA,EAAG,CACD,KAAM,UACN,MAAO,SACT,EACA,GAAI,CACF,KAAM,UACN,MAAO,SACT,EACA,GAAI,CACF,KAAM,UACN,MAAO,SACT,EACA,GAAI,CACF,KAAM,UACN,MAAO,SACT,EACA,IAAK,CACH,KAAM,UACN,MAAO,SACT,EACA,IAAK,CACH,KAAM,UACN,MAAO,SACT,EACA,IAAK,CACH,KAAM,UACN,MAAO,SACT,EACA,KAAM,CACJ,KAAM,UACN,MAAO,SACT,EACA,KAAM,CACJ,KAAM,UACN,MAAO,SACT,CACF,EAEIC,EAAO,KAAK,IAAIF,EAAO,MAAM,EAAI,KAAK,IAAI,GAAI,EAAI,IAEtDD,GAAO;AAAA,oBACK,GAAK,KAAOhB,EAAI,GAAK,YAAY,GAAK,KAAOK,EAAI,uCAC3DY,IAAW,GAAK,UAAYC,EAAOD,CAAM,GAAG,MAAQ;AAAA,UAGpDA,IAAW,IACX;AAAA,sBACY,GAAK,KAAOjB,EAAI,GAAK,IAAM,IAAM,UAC1C,GAAK,KAAOK,EAAI,GAAK,IAAM,EAAIc,EAAO,0CACAA,aACvCD,EAAOD,CAAM,GAAG,OAAS,8HAC0FA;AAAA;AAAA,WAM3H,OAAAD,GAAO,SAEA,OAAOX,EAAMW,CAAG,IACzB,EAEII,EAAcvB,GAAU,CAC1B,IAAIwB,EAAQ,EACRC,EAAS,KAEb,QAASjB,KAAKR,EACZ,QAASG,KAAKH,EAAMQ,CAAC,EACfR,EAAMQ,CAAC,EAAEL,CAAC,IAAM,KAClBqB,IACI,KAAK,OAAO,EAAI,EAAIA,IAAOC,EAAS,CAACjB,EAAGL,CAAC,IAKnD,GAAIsB,IAAW,KAAM,CACnB,IAAIV,EAAW,gBAAgBf,CAAK,EACpC,OAAAe,EAASU,EAAO,CAAC,CAAC,EAAEA,EAAO,CAAC,CAAC,EAAI,KAAK,OAAO,EAAI,GAAM,IAAM,IAC7DrB,EAAcW,CAAQ,EACfA,EAEX,EAEMW,EAAS,IAAM,CACnB,IAAIX,EAAWhB,EAAmB,EAC9B,CAAC,EAAGI,CAAC,EAAI,CAAC,KAAK,MAAM,KAAK,OAAO,EAAI,CAAC,EAAG,KAAK,MAAM,KAAK,OAAO,EAAI,CAAC,CAAC,EAC1EY,EAAS,CAAC,EAAEZ,CAAC,EAAI,KAAK,OAAO,EAAI,GAAM,IAAM,IAE7CF,EAASc,CAAQ,EACjBjB,EAAO,QAAUD,EAAO,OAC1B,EAEM8B,EAAcC,GAAWA,EAAO,CAAC,EAAE,IAAI,CAACC,EAAGrB,IAAMoB,EAAO,IAAKvB,GAAQA,EAAIG,CAAC,CAAC,CAAC,EAAE,QAAQ,EACtFsB,EAAeF,GAAWA,EAAO,CAAC,EAAE,IAAI,CAACC,EAAGrB,IAAMoB,EAAO,IAAKvB,GAAQA,EAAIG,CAAC,CAAC,CAAC,EAAE,IAAKH,GAAQA,EAAI,QAAQ,CAAC,EACzG0B,EAAaH,GAAWA,EAAO,IAAKvB,GAAQA,EAAI,QAAQ,CAAC,EAAE,QAAQ,EAErE2B,EAAaC,GAAkB,CACjC,GAAI,CAACC,EAAiBC,CAAW,EAAItB,EAASoB,CAAa,EACvD,CAACG,EAAaC,CAAW,EAAIpB,EAAMiB,CAAe,EAClD,CAACnB,EAAUc,CAAC,EAAIhB,EAASuB,CAAW,EAExC,OAAID,GAAeE,KACjBtB,EAAWQ,EAAWR,CAAQ,GAEzBA,CACT,EAEIuB,EAAWL,GAAkBH,EAAYE,EAAUL,EAAWM,CAAa,CAAC,CAAC,EAE7EM,EAAaN,GAAkBN,EAAWK,EAAUF,EAAYG,CAAa,CAAC,CAAC,EAE/EO,EAAcP,GAAkBF,EAAUC,EAAUD,EAAUE,CAAa,CAAC,CAAC,EAEjF,OACE,KAAC,UACC,QACE,KAAC,mBACEnC,EAAO,UAAYD,EAAO,SACzB,KAAC,UAAO,MAAM,SAAS,SAAU6B,EAAQ,EAEzC,uBACE,KAAC,UACC,MAAM,UACN,KAAM,OAAK,gBACX,SAAU,CAAE,UAAW,CAAC,MAAO,OAAO,EAAG,IAAK,GAAI,EAClD,SAAU,SAAY,CACpB,QAAM,gBAAa,CACjB,MAAO,oCACP,cAAe,CACb,MAAO,UACP,MAAO,QAAM,YAAY,YACzB,SAAU,IAAM,CACdA,EAAO,CACT,CACF,CACF,CAAC,CACH,EACF,EACA,KAAC,UACC,MAAM,aACN,SAAU,CAAE,UAAW,CAAC,OAAO,EAAG,IAAK,WAAY,EACnD,KAAM,OAAK,UACX,SAAU,IAAM,CACdzB,EAAS+B,CAAS,CACpB,EACF,EACA,KAAC,UACC,MAAM,cACN,SAAU,CAAE,UAAW,CAAC,OAAO,EAAG,IAAK,YAAa,EACpD,KAAM,OAAK,WACX,SAAU,IAAM,CACd/B,EAASuC,CAAU,CACrB,EACF,EACA,KAAC,UACC,MAAM,WACN,SAAU,CAAE,UAAW,CAAC,OAAO,EAAG,IAAK,SAAU,EACjD,KAAM,OAAK,QACX,SAAU,IAAM,CACdvC,EAASqC,CAAO,CAClB,EACF,EACA,KAAC,UACC,MAAM,aACN,SAAU,CAAE,UAAW,CAAC,OAAO,EAAG,IAAK,WAAY,EACnD,KAAM,OAAK,UACX,SAAU,IAAM,CACdrC,EAASsC,CAAS,CACpB,EACF,CACF,CAEJ,EAEF,SAAUrB,EAAclB,CAAK,EAC/B,CAEJ",
  "names": ["game2048_exports", "__export", "Game2048", "__toCommonJS", "import_api", "CHARS", "utf8Encode", "input", "replace", "i", "t", "length", "c", "charCodeAt", "output", "String", "fromCharCode", "chr1", "chr3", "enc1", "enc2", "enc3", "enc4", "chr2", "isNaN", "charAt", "g", "detectInputType", "SVGElement", "getBase64", "encode", "convertElement", "XMLSerializer", "serializeToString", "svg64", "o", "import_react", "Game2048", "TEST_BOARD", "Status", "status", "generateEmptyBoard", "board", "setBoard", "emptyBoard", "j", "checkGameOver", "row", "cell", "gameOver", "i", "diffs", "di", "dj", "savedBoard", "compress", "hasChanged", "newBoard", "pos", "merge", "generateBoard", "svg", "square", "colors", "size", "addNewTile", "count", "result", "replay", "rotateLeft", "matrix", "_", "rotateRight", "rotate180", "shiftLeft", "previousBoard", "compressedBoard", "hasChanged1", "mergedBoard", "hasChanged2", "shiftUp", "shiftDown", "shiftRight"]
}
