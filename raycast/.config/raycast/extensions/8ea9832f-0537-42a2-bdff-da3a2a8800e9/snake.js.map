{
  "version": 3,
  "sources": ["../src/snake.jsx"],
  "sourcesContent": ["import React, { useState, useEffect, useRef } from \"react\";\nimport { ActionPanel, Action, List, environment, Icon } from \"@raycast/api\";\n\nlet smallText = environment.textSize === \"medium\";\n\nconst ROWS = smallText ? 18 : 15;\nconst COLS = smallText ? 30 : 26;\n\nconst initialGrid = Array.from({ length: ROWS }, () => Array.from({ length: COLS }, () => \"  \"));\n\nconst Direction = {\n  UP: \"UP\",\n  DOWN: \"DOWN\",\n  LEFT: \"LEFT\",\n  RIGHT: \"RIGHT\",\n};\n\nconst Status = {\n  START: \"START\",\n  PLAYING: \"PLAYING\",\n  GAME_OVER: \"GAME_OVER\",\n};\n\nlet speed = 250;\n\nexport default function Command() {\n  const [grid, setGrid] = useState(initialGrid);\n  const [snake, setSnake] = useState([\n    { row: Math.floor(ROWS / 2), col: Math.floor(COLS / 2) },\n    { row: Math.floor(ROWS / 2), col: Math.floor(COLS / 2) - 1 },\n    { row: Math.floor(ROWS / 2), col: Math.floor(COLS / 2) - 2 },\n  ]);\n  const food = useRef(\n    randomFood([\n      { row: Math.floor(ROWS / 2), col: Math.floor(COLS / 2) },\n      { row: Math.floor(ROWS / 2), col: Math.floor(COLS / 2) - 1 },\n      { row: Math.floor(ROWS / 2), col: Math.floor(COLS / 2) - 2 },\n    ]),\n  );\n  const [score, setScore] = useState(0);\n  const queuedDirection = useRef(Direction.RIGHT);\n  const direction = useRef(Direction.RIGHT);\n  const intervalRef = useRef(null); // Separate ref for interval identifier\n  const [markdown, setMarkdown] = useState(\"\");\n  const [selectedTab, setSelectedTab] = useState(\"game\");\n  const [status, setStatus] = useState(Status.START);\n\n  useEffect(() => {\n    const newGrid = Array.from({ length: ROWS }, () => Array.from({ length: COLS }, () => \"  \"));\n    snake.forEach(({ row, col }, i) => {\n      if (i % 2 === 0) {\n        newGrid[row][col] = \"\u2591\u2591\";\n      } else {\n        newGrid[row][col] = \"\u2592\u2592\";\n      }\n    });\n    const { row: foodRow, col: foodCol } = food.current;\n    newGrid[foodRow][foodCol] = \"\u2588\u2588\";\n    setGrid(newGrid);\n  }, [snake]);\n\n  function moveSnake() {\n    setSnake((oldSnake) => {\n      direction.current = queuedDirection.current;\n      const head = { ...oldSnake[0] };\n      switch (direction.current) {\n        case Direction.UP:\n          head.row--;\n          break;\n        case Direction.DOWN:\n          head.row++;\n          break;\n        case Direction.LEFT:\n          head.col--;\n          break;\n        case Direction.RIGHT:\n          head.col++;\n          break;\n      }\n\n      const hitWall = head.row < 0 || head.row >= ROWS || head.col < 0 || head.col >= COLS;\n      const hitSelf = oldSnake.some(\n        (segment, index) => index !== 0 && segment.row === head.row && segment.col === head.col,\n      );\n      if (hitWall || hitSelf) {\n        clearInterval(intervalRef.current); // Clear interval using the ref's current value\n        intervalRef.current = null;\n        setStatus(Status.GAME_OVER);\n        setMarkdown(gameOver);\n        return oldSnake;\n      }\n      const newSnake = [head, ...oldSnake.slice(0, oldSnake.length - 1)];\n      if (head.row === food.current.row && head.col === food.current.col) {\n        food.current = randomFood(newSnake);\n        newSnake.push(head);\n        setScore((score) => score + 100);\n      }\n      return newSnake;\n    });\n  }\n\n  useEffect(() => {\n    if (status === Status.START) {\n      setMarkdown(gameStart);\n    }\n    if (status === Status.PLAYING) {\n      const rows = grid.map((row) => \"\u2502\" + row.join(\"\") + \"\u2502\");\n      if (smallText) {\n        setMarkdown(`\n\\`\\`\\`\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500RAYCAST ARCADE\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E\n${rows.join(\"\\n\")}\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524SCORE: ${(score + \"\").padStart(6, \"0\")}\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\n\\`\\`\\`\n          `);\n      } else {\n        setMarkdown(`\n\\`\\`\\`\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500RAYCAST ARCADE\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E\n${rows.join(\"\\n\")}\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524SCORE: ${(score + \"\").padStart(6, \"0\")}\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\n\\`\\`\\`\n          `);\n      }\n    }\n    if (status === Status.GAME_OVER) {\n      setMarkdown(gameOver);\n    }\n  }, [grid, status]);\n\n  function handleKeyDown(event) {\n    let newDirection;\n    switch (event) {\n      case \"ArrowUp\":\n        if (direction.current !== Direction.DOWN) newDirection = Direction.UP;\n        else newDirection = direction.current;\n        break;\n      case \"ArrowDown\":\n        if (direction.current !== Direction.UP) newDirection = Direction.DOWN;\n        else newDirection = direction.current;\n        break;\n      case \"ArrowLeft\":\n        if (direction.current !== Direction.RIGHT) newDirection = Direction.LEFT;\n        else newDirection = direction.current;\n        break;\n      case \"ArrowRight\":\n        if (direction.current !== Direction.LEFT) newDirection = Direction.RIGHT;\n        else newDirection = direction.current;\n        break;\n      default:\n        newDirection = direction.current;\n        return;\n    }\n    queuedDirection.current = newDirection;\n  }\n\n  function randomFood(snake) {\n    const emptyCells = [];\n    grid.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === \"  \" && !snake.some((segment) => segment.row === rowIndex && segment.col === colIndex)) {\n          emptyCells.push({ row: rowIndex, col: colIndex });\n        }\n      });\n    });\n    return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n  }\n\n  let gameOver = smallText\n    ? `\n  \\`\\`\\`\n  \u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500RAYCAST ARCADE\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                         GAME OVER!                         \u2502\n  \u2502                  PRESS ENTER TO TRY AGAIN                  \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524SCORE: ${(score + \"\").padStart(6, \"0\")}\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\n  \\`\\`\\`\n  `\n    : `\n  \\`\\`\\`\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500RAYCAST ARCADE\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                     GAME OVER!                     \u2502\n\u2502              PRESS ENTER TO TRY AGAIN              \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524SCORE: ${(score + \"\").padStart(6, \"0\")}\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\n\\`\\`\\`\n  `;\n  let gameStart = smallText\n    ? `\n  \\`\\`\\`\n  \u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500RAYCAST ARCADE\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                       RAYCAST SNAKE.                       \u2502\n  \u2502                    PRESS ENTER TO PLAY.                    \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2502                                                            \u2502\n  \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524SCORE: ${(score + \"\").padStart(6, \"0\")}\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\n  \\`\\`\\`\n  `\n    : `\n  \\`\\`\\`\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500RAYCAST ARCADE\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256E\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                   RAYCAST SNAKE.                   \u2502\n\u2502                PRESS ENTER TO PLAY.                \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2502                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524SCORE: ${(score + \"\").padStart(6, \"0\")}\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\n\\`\\`\\`\n  `;\n\n  return (\n    <List\n      searchText=\"\"\n      onSearchTextChange={(e) => {\n        if (e === \"w\") {\n          handleKeyDown(\"ArrowUp\");\n        }\n        if (e === \"a\") {\n          handleKeyDown(\"ArrowLeft\");\n        }\n        if (e === \"s\") {\n          handleKeyDown(\"ArrowDown\");\n        }\n        if (e === \"d\") {\n          handleKeyDown(\"ArrowRight\");\n        }\n      }}\n      navigationTitle=\"Snake\"\n      searchBarPlaceholder=\"Focus your cursor here...\"\n      isShowingDetail={true}\n      selectedItemId={selectedTab}\n      onSelectionChange={(e) => {\n        setSelectedTab(e);\n        if (e === \"help\") {\n          clearInterval(intervalRef.current); // Clear interval using the ref's current value\n          intervalRef.current = null;\n        }\n        if (e === \"game\" && intervalRef.current == null && !(status == Status.START || status == Status.GAME_OVER)) {\n          // Check intervalRef.current instead of snakeInterval\n          intervalRef.current = setInterval(moveSnake, speed); // Store the new identifier in the ref\n        }\n      }}\n    >\n      <List.Item\n        id=\"game\"\n        title={\"Snake\"}\n        icon={Icon.Play}\n        detail={<List.Item.Detail markdown={markdown} />}\n        actions={\n          <ActionPanel title=\"Game controls\">\n            <Action\n              icon={status === Status.PLAYING ? Icon.Pause : Status.START ? Icon.Play : Icon.RotateClockwise}\n              title={status === Status.PLAYING ? \"Pause\" : Status.START ? \"Play\" : \"Replay\"}\n              onAction={() => {\n                if (status === Status.PLAYING) {\n                  setSelectedTab(\"help\");\n                  clearInterval(intervalRef.current);\n                  intervalRef.current = null;\n                }\n                if (status === Status.GAME_OVER) {\n                  setGrid(Array.from({ length: ROWS }, () => Array.from({ length: COLS }, () => \"  \")));\n                  setStatus(Status.PLAYING);\n                  setScore(0);\n                  food.current = randomFood(snake);\n                  setSnake([\n                    { row: Math.floor(ROWS / 2), col: Math.floor(COLS / 2) },\n                    { row: Math.floor(ROWS / 2), col: Math.floor(COLS / 2) - 1 },\n                    { row: Math.floor(ROWS / 2), col: Math.floor(COLS / 2) - 2 },\n                  ]);\n\n                  queuedDirection.current = Direction.RIGHT;\n\n                  direction.current = Direction.RIGHT;\n\n                  intervalRef.current = setInterval(moveSnake, speed);\n                }\n                if (status === Status.START) {\n                  setStatus(Status.PLAYING);\n                  intervalRef.current = setInterval(moveSnake, speed);\n                }\n              }}\n            />\n            <Action\n              title=\"Up\"\n              icon={Icon.ArrowUp}\n              shortcut={{ modifiers: [\"shift\"], key: \"arrowUp\" }}\n              onAction={() => handleKeyDown(\"ArrowUp\")}\n            />\n            <Action\n              title=\"Down\"\n              icon={Icon.ArrowDown}\n              shortcut={{ modifiers: [\"shift\"], key: \"arrowDown\" }}\n              onAction={() => handleKeyDown(\"ArrowDown\")}\n            />\n            <Action\n              title=\"Left\"\n              icon={Icon.ArrowLeft}\n              shortcut={{ modifiers: [\"shift\"], key: \"arrowLeft\" }}\n              onAction={() => handleKeyDown(\"ArrowLeft\")}\n            />\n            <Action\n              title=\"Right\"\n              icon={Icon.ArrowRight}\n              shortcut={{ modifiers: [\"shift\"], key: \"arrowRight\" }}\n              onAction={() => handleKeyDown(\"ArrowRight\")}\n            />\n          </ActionPanel>\n        }\n      />\n      <List.Item\n        id=\"help\"\n        icon={Icon.Pause}\n        title={\"Help / Pause\"}\n        detail={\n          <List.Item.Detail\n            markdown={\n              \"# \u23F8 GAME PAUSED \\n # Intro\\nWelcome to Snake, in Raycast Arcade. Your goal is to eat the apples (fully filled in squares) for 100 points each, but you cannot touch the walls or yourself. If you do, it's game over. \\n # Controls \\n In order to play, make sure you focus your cursor on the top search bar, and use WASD to navigate your Snake. You can also use the arrow keys, but you're going to have to include Shift as a modifier while using arrows.\"\n            }\n          />\n        }\n        actions={\n          <ActionPanel title=\"Game Controls\">\n            <Action\n              icon={Icon.Play}\n              title={status === Status.PLAYING ? \"Unpause\" : \"Return to Game\"}\n              onAction={() => {\n                if (status === Status.START) {\n                  setSelectedTab(\"game\");\n                }\n                if (status === Status.PLAYING) {\n                  setSelectedTab(\"game\");\n                  intervalRef.current = setInterval(moveSnake, speed);\n                }\n                if (status === Status.GAME_OVER) {\n                  setSelectedTab(\"game\");\n                }\n              }}\n            />\n          </ActionPanel>\n        }\n      />\n    </List>\n  );\n}\n"],
  "mappings": "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",
  "names": ["snake_exports", "__export", "Command", "__toCommonJS", "import_react", "import_api", "smallText", "ROWS", "COLS", "initialGrid", "Direction", "Status", "speed", "grid", "setGrid", "snake", "setSnake", "food", "randomFood", "score", "setScore", "queuedDirection", "direction", "intervalRef", "markdown", "setMarkdown", "selectedTab", "setSelectedTab", "status", "setStatus", "newGrid", "row", "col", "i", "foodRow", "foodCol", "moveSnake", "oldSnake", "head", "hitWall", "hitSelf", "segment", "index", "gameOver", "newSnake", "gameStart", "rows", "handleKeyDown", "event", "newDirection", "emptyCells", "rowIndex", "cell", "colIndex", "e"]
}
