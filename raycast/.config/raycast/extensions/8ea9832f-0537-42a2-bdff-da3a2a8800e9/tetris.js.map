{
  "version": 3,
  "sources": ["../src/tetris.jsx"],
  "sourcesContent": ["import React, { useState, useEffect, useRef } from \"react\";\nimport { ActionPanel, Action, List, environment, Icon } from \"@raycast/api\";\n\nexport default function Tetris() {\n  // Utility functions\n  let generateNewGrid = () =>\n    Array(22)\n      .fill()\n      .map(() => Array(10).fill(0));\n  let rotate = {\n    cw: (matrix) => matrix[0].map((_, index) => matrix.map((row) => row[index]).reverse()),\n    ccw: (matrix) => matrix[0].map((val, index) => matrix.map((row) => row[row.length - 1 - index])),\n  };\n\n  // useEffect(() => setGame(), [piece, board]) -> useEffect(() => setMarkdown(), [game]) -> Renders `markdown`\n\n  const Status = {\n    PLAYING: \"playing\",\n    PAUSED: \"paused\",\n    LOSE: \"lose\",\n  };\n\n  let levelG = [\n    0, // Level 0 doesn't exist...\n  ];\n  for (let i = 1; i <= 15; i++) {\n    levelG.push(Math.round((0.05 + ((i - 1) * (0.25 - 0.05)) / 14) * 100) / 100);\n  }\n\n  let pieces = [\n    [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [\n      [1, 1],\n      [1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0],\n    ],\n  ];\n\n  let bag = useRef(JSON.parse(JSON.stringify(pieces)));\n\n  useEffect(() => {\n    for (let i = bag.current.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [bag.current[i], bag.current[j]] = [bag.current[j], bag.current[i]];\n    }\n  }, []);\n\n  // Just the pieces that have already been placed (no current piece)\n  // Uses ref to update through setTimeout\n  let board = useRef(generateNewGrid());\n\n  let generatePiece = () => {\n    let newPiece = bag.current.shift();\n    if (bag.current.length === 1) {\n      let newBag = JSON.parse(JSON.stringify(pieces));\n      for (let i = newBag.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [newBag[i], newBag[j]] = [newBag[j], newBag[i]];\n      }\n      bag.current = newBag;\n    }\n    return {\n      x: newPiece.length === 2 ? 4 : 3,\n      y: 0,\n      shape: newPiece,\n    };\n  };\n\n  // A object that stores data about the current piece\n  let [piece, setPiece] = useState(() => generatePiece());\n\n  // A completely combined 20x10 matrix of everything in the game\n  let [game, setGame] = useState(generateNewGrid());\n\n  // Actual markdown\n  let [markdown, setMarkdown] = useState(\"\");\n\n  let speed = useRef(200);\n\n  let [points, setPoints] = useState(0);\n  let [lines, setLines] = useState(0);\n  let [level, setLevel] = useState(15);\n  let status = useRef(Status.PLAYING);\n\n  useEffect(() => {\n    setLevel(Math.floor(lines / 10) + 1);\n  }, [points]);\n\n  useEffect(() => {\n    let frameRate = 60;\n    let millisecondsPerCell = 1000 / (levelG[level] * frameRate);\n    speed.current = millisecondsPerCell;\n  }, [level]);\n\n  let [startTime, setStartTime] = useState(0);\n  useEffect(() => {\n    setTimeout(() => {\n      tick();\n    }, speed.current);\n    setStartTime(Date.now());\n  }, []);\n\n  let handleLineClear = () => {\n    let matrix = board.current;\n    let lines = 0;\n    for (let i = 0; i < matrix.length; i++) {\n      if (matrix[i].every((x) => x === 1)) {\n        matrix.splice(i, 1);\n        matrix.unshift(new Array(10).fill(0));\n        lines++;\n      }\n    }\n    setLines((prevLines) => (prevLines += lines));\n    switch (lines) {\n      case 1:\n        setPoints((pts) => pts + 100 * level);\n        break;\n      case 2:\n        setPoints((pts) => pts + 300 * level);\n        break;\n      case 3:\n        setPoints((pts) => pts + 500 * level);\n        break;\n      case 4:\n        setPoints((pts) => pts + 800 * level);\n        break;\n      default:\n        break;\n    }\n  };\n  let [isTicking, setTicking] = useState(true);\n\n  let tick = () => {\n    if (status.current === Status.PLAYING) {\n      setTicking(true);\n      setPiece((original) => {\n        if (!hasCollision({ ...original, y: original.y + 1 })) {\n          let newPiece = JSON.parse(JSON.stringify(original));\n          newPiece.y++;\n          return newPiece;\n        } else {\n          if (original.y === 0) {\n            if (environment.textSize === \"medium\") {\n              setMarkdown(`\n  \\`\\`\\`       \n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502        GAME        \u2502    PRESS ENTER\n  \u2502        OVER        \u2502    TO RESTART\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502\n  \u2502                    \u2502 \n  \\`\\`\\`\n              `);\n            } else {\n              setMarkdown(`\n  \\`\\`\\`\n  \n  \u2502          \u2502\n  \u2502          \u2502\n  \u2502          \u2502\n  \u2502          \u2502\n  \u2502   GAME   \u2502   PRESS ENTER\n  \u2502   OVER   \u2502   TO RESTART\n  \u2502          \u2502\n  \u2502          \u2502\n  \u2502          \u2502\n  \u2502          \u2502\n  \u2570\u2500\u2500TETRIS\u2500\u2500\u256F\n  \\`\\`\\`\n              `);\n            }\n            status.current = Status.LOSE;\n            return original;\n          } else {\n            let newBoard = JSON.parse(JSON.stringify(board.current));\n            let { x, y, shape } = original;\n            for (let i = 0; i < shape.length; i++) {\n              for (let j = 0; j < shape[0].length; j++) {\n                if (shape[i][j] !== 0 && newBoard[y + i]) {\n                  newBoard[y + i][x + j] = shape[i][j];\n                }\n              }\n            }\n            board.current = newBoard;\n            let newPiece = generatePiece();\n\n            handleLineClear();\n            return newPiece;\n          }\n        }\n      });\n    }\n    if (status.current === Status.PLAYING) {\n      setTimeout(() => {\n        tick();\n      }, speed.current);\n    } else {\n      setTicking(false);\n    }\n  };\n\n  useEffect(() => {\n    if (status.current === Status.PLAYING && !isTicking) {\n      tick();\n    }\n  }, [status.current]);\n\n  let hasCollision = (checkPiece = piece) => {\n    let { shape, x, y } = checkPiece;\n    for (let i = 0; i < shape.length; i++) {\n      for (let j = 0; j < shape[0].length; j++) {\n        // Only need to check collision if there's actually something on the piece model!\n        if (shape[i][j] !== 0) {\n          let newI = y + i;\n          let newJ = x + j;\n          if (\n            board.current[newI] !== undefined &&\n            board.current[newI][newJ] !== undefined &&\n            board.current[newI][newJ] === 0\n          ) {\n            // Can move piece!\n          } else {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n\n  function convertToMmSs(milliseconds) {\n    var totalSeconds = Math.floor(milliseconds / 1000);\n    var minutes = Math.floor(totalSeconds / 60);\n    var seconds = totalSeconds % 60;\n    var mmss = (minutes < 10 ? \"0\" : \"\") + minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    return mmss;\n  }\n\n  let generateMarkdown = () => {\n    if (environment.textSize === \"medium\") {\n      let result = [];\n      for (let i = 1; i < game.length; i += 1) {\n        let current = \"\";\n        for (let j = 0; j < game[i].length; j++) {\n          current += game[i][j] === 0 ? \"  \" : \"\u2588\u2588\";\n        }\n        if (i === 0) {\n          result.push([\" \" + current + \" \"]);\n        } else if (i === 3) {\n          result.push([\"\u2502\" + current + `\u2502 NEXT:`]);\n        } else if (i === 9) {\n          result.push([\"\u2502\" + current + `\u2502 LVL:    ${level} `]);\n        } else if (i === 10) {\n          result.push([\"\u2502\" + current + `\u2502 TIME:   ${convertToMmSs(Date.now() - startTime)}`]);\n        } else if (i === 11) {\n          result.push([\"\u2502\" + current + `\u2502 LINES:  ${String(lines).padStart(6, \"0\")}`]);\n        } else if (i === 12) {\n          result.push([\"\u2502\" + current + `\u2502 POINTS: ${String(points).padStart(6, \"0\")} `]);\n        } else {\n          result.push([\"\u2502\" + current + \"\u2502\"]);\n        }\n      }\n      // result += \"\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500TETRIS\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\\n\";\n\n      let nextPiece = structuredClone(bag.current[0]);\n      if (nextPiece.length === 3) nextPiece.push(new Array(nextPiece[0].length).fill(0));\n\n      for (let i = 0; i < nextPiece.length; i++) {\n        result[i + 3] += \" \";\n        for (let j = 0; j < nextPiece[i].length; j++) {\n          result[i + 3] += nextPiece[i][j] === 1 ? \"\u2588\u2588\" : \"  \";\n        }\n      }\n\n      return result.join(\"\\n\") + \"\\n\";\n    } else {\n      let result = [];\n      for (let i = 0; i < game.length / 2; i += 1) {\n        let matrixSlice = game.slice(i * 2, i * 2 + 2);\n        let current = \"\";\n        for (let j = 0; j < game[0].length; j++) {\n          let blocks = {\n            \"00\": \" \",\n            \"01\": \"\u2584\",\n            10: \"\u2580\",\n            11: \"\u2588\",\n          };\n          let blockType = [matrixSlice[0][j], matrixSlice[1][j]].join(\"\");\n          current += blocks[blockType];\n        }\n        if (i === 0) {\n          result.push([\" \" + current + \"\"]);\n        } else if (i === 1) {\n          result.push([\"\u2502\" + current + \"\u2502 NEXT:\"]);\n        } else if (i === 7) {\n          result.push([\"\u2502\" + current + `\u2502 LVL:    ${level}`]);\n        } else if (i === 8) {\n          result.push([\"\u2502\" + current + `\u2502 TIME:   ${convertToMmSs(Date.now() - startTime)}`]);\n        } else if (i === 9) {\n          result.push([\"\u2502\" + current + `\u2502 LINES:  ${String(lines).padStart(6, \"0\")}`]);\n        } else if (i === 10) {\n          result.push([\"\u2502\" + current + `\u2502 POINTS: ${String(points).padStart(6, \"0\")}`]);\n        } else {\n          result.push([\"\u2502\" + current + \"\u2502\"]);\n        }\n      }\n\n      let nextPiece = structuredClone(bag.current[0]);\n      if (nextPiece.length === 3) nextPiece.push(new Array(nextPiece[0].length).fill(0));\n\n      for (let i = 0; i < nextPiece.length / 2; i++) {\n        result[i + 2] += \" \";\n        let pieceSlice = nextPiece.slice(i * 2, i * 2 + 2);\n        for (let j = 0; j < nextPiece[i].length; j++) {\n          let blocks = {\n            \"00\": \" \",\n            \"01\": \"\u2584\",\n            10: \"\u2580\",\n            11: \"\u2588\",\n          };\n          let blockType = [pieceSlice[0][j], pieceSlice[1][j]].join(\"\");\n\n          result[i + 2] += blocks[blockType];\n        }\n      }\n\n      result.push(\"\u2570\u2500\u2500TETRIS\u2500\u2500\u256F\");\n      return result.join(\"\\n\") + \"\\n\";\n    }\n  };\n\n  useEffect(() => {\n    let newGame = JSON.parse(JSON.stringify(board.current));\n    let { x, y, shape } = piece;\n    for (let i = 0; i < shape.length; i++) {\n      for (let j = 0; j < shape[0].length; j++) {\n        if (shape[i][j] !== 0) {\n          newGame[y + i][x + j] = shape[i][j];\n        }\n      }\n    }\n    setGame(newGame);\n  }, [piece, board]);\n\n  useEffect(() => {\n    setMarkdown((prevMarkdown) => `\\`\\`\\`${generateMarkdown(prevMarkdown)}\\`\\`\\``);\n  }, [game]);\n\n  let handleKeyDown = (key) => {\n    switch (key) {\n      case \"d\":\n        setPiece((original) => {\n          if (!hasCollision({ ...original, x: original.x + 1 })) {\n            let newPiece = JSON.parse(JSON.stringify(original));\n            newPiece.x++;\n            return newPiece;\n          }\n          return original;\n        });\n        break;\n      case \"a\":\n        setPiece((original) => {\n          if (!hasCollision({ ...original, x: original.x - 1 })) {\n            let newPiece = JSON.parse(JSON.stringify(original));\n            newPiece.x--;\n            return newPiece;\n          }\n          return original;\n        });\n        break;\n      case \"w\":\n        setPiece((original) => {\n          if (!hasCollision({ ...original, shape: rotate.cw(original.shape) })) {\n            let newPiece = JSON.parse(JSON.stringify(original));\n            newPiece.shape = rotate.cw(original.shape);\n            return newPiece;\n          }\n          return original;\n        });\n        break;\n      case \"s\":\n        setPiece((original) => {\n          if (!hasCollision({ ...original, y: original.y + 1 })) {\n            let newPiece = JSON.parse(JSON.stringify(original));\n            newPiece.y += 1;\n            return newPiece;\n          }\n          return original;\n        });\n        break;\n      case \" \":\n        setPiece((original) => {\n          let dy = 0;\n          while (!hasCollision({ ...original, y: original.y + dy })) {\n            dy += 1;\n          }\n          let newPiece = JSON.parse(JSON.stringify(original));\n          newPiece.y += dy - 1;\n          return newPiece;\n        });\n        break;\n      default:\n        return;\n    }\n  };\n\n  let [selectedTab, setSelectedTab] = useState(\"game\");\n\n  return (\n    <List\n      searchText=\"\"\n      searchBarPlaceholder=\"Focus your cursor here...\"\n      onSearchTextChange={(key) => {\n        handleKeyDown(key);\n      }}\n      isShowingDetail={true}\n      selectedItemId={selectedTab}\n      onSelectionChange={(id) => {\n        setSelectedTab(id);\n        if (id === \"help\") {\n          status.current = Status.PAUSED;\n        }\n        if (id === \"game\") {\n          status.current = Status.PLAYING;\n        }\n      }}\n    >\n      <List.Item\n        title=\"Tetris\"\n        id=\"game\"\n        icon={Icon.Play}\n        detail={<List.Item.Detail markdown={markdown} />}\n        actions={\n          <ActionPanel>\n            <Action\n              title={status.current === Status.PLAYING ? \"Pause\" : \"Restart\"}\n              icon={status.current === Status.PLAYING ? Icon.Pause : Icon.RotateClockwise}\n              onAction={() => {\n                if (status.current === Status.PLAYING) {\n                  setSelectedTab(\"help\");\n                  status.current = Status.PAUSED;\n                } else {\n                  status.current = Status.PLAYING;\n                  board.current = generateNewGrid();\n                  setPiece(generatePiece());\n                  setGame(generateNewGrid());\n                  setPoints(0);\n                  setLines(0);\n                  setStartTime(Date.now());\n                  setLevel(1);\n                }\n              }}\n            />\n            <Action\n              icon={Icon.ArrowLeft}\n              title=\"Move Piece Left\"\n              shortcut={{ modifiers: [\"shift\"], key: \"a\" }}\n              onAction={() => handleKeyDown(\"a\")}\n            />\n            <Action\n              icon={Icon.ArrowRight}\n              title=\"Move Piece Right\"\n              shortcut={{ modifiers: [\"shift\"], key: \"d\" }}\n              onAction={() => handleKeyDown(\"d\")}\n            />\n            <Action\n              icon={Icon.ArrowDown}\n              title=\"Move Piece Down\"\n              shortcut={{ modifiers: [\"shift\"], key: \"s\" }}\n              onAction={() => handleKeyDown(\"s\")}\n            />\n            <Action\n              icon={Icon.RotateClockwise}\n              title=\"Rotate Piece\"\n              shortcut={{ modifiers: [\"shift\"], key: \"w\" }}\n              onAction={() => handleKeyDown(\"w\")}\n            />\n          </ActionPanel>\n        }\n      ></List.Item>\n      <List.Item\n        icon={Icon.Pause}\n        title=\"Help / Pause\"\n        id=\"help\"\n        detail={\n          <List.Item.Detail\n            markdown={`# Game Paused\\nPress enter to return to the game.${\n              environment.textSize === \"large\"\n                ? \"\\n > Large text size detected. You may want to use the Small text size for a larger Tetris board.\"\n                : \"\"\n            }\\n# Controls\\nAfter focusing your cursor in the top search box, simply use WASD and Space to navigate the piece.\\n- Using \\`A\\`/\\`D\\` moves the piece left or right\\n- Using \\`W\\` rotates the piece clockwise\\n- Using \\`S\\` moves the piece down\\n- Space drops the piece completely.\\n> Key repeats are disabled by default on MacOS. You can either turn them on, or hold \\`Shift\\` with the respective control to enable repeat.\\n# Rules\\n If you do not know how to play Tetris, read about it on Wikipedia [here](https://en.wikipedia.org/wiki/Tetris).`}\n          />\n        }\n        actions={\n          <ActionPanel>\n            <Action\n              icon={Icon.Play}\n              title=\"Unpause\"\n              onAction={() => {\n                setSelectedTab(\"game\");\n                status.current = Status.PLAYING;\n              }}\n            />\n          </ActionPanel>\n        }\n      ></List.Item>\n    </List>\n  );\n}\n"],
  "mappings": "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",
  "names": ["tetris_exports", "__export", "Tetris", "__toCommonJS", "import_react", "import_api", "generateNewGrid", "rotate", "matrix", "_", "index", "row", "val", "Status", "levelG", "i", "pieces", "bag", "j", "board", "generatePiece", "newPiece", "newBag", "piece", "setPiece", "game", "setGame", "markdown", "setMarkdown", "speed", "points", "setPoints", "lines", "setLines", "level", "setLevel", "status", "frameRate", "millisecondsPerCell", "startTime", "setStartTime", "tick", "handleLineClear", "x", "prevLines", "pts", "isTicking", "setTicking", "original", "hasCollision", "newBoard", "y", "shape", "checkPiece", "newI", "newJ", "convertToMmSs", "milliseconds", "totalSeconds", "minutes", "seconds", "mmss", "generateMarkdown", "result", "current", "nextPiece", "matrixSlice", "blocks", "blockType", "pieceSlice", "newGame", "prevMarkdown", "handleKeyDown", "key", "dy", "selectedTab", "setSelectedTab", "id"]
}
