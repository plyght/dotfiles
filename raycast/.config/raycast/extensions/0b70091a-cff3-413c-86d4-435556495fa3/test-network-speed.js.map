{
  "version": 3,
  "sources": ["../src/test-network-speed.tsx", "../src/components/action-open-command-preferences.tsx", "../src/hooks/hooks.ts", "../src/utils/common-util.ts", "../src/components/action-open-network-speed.tsx"],
  "sourcesContent": ["import { ActionPanel, Color, getPreferenceValues, Icon, List } from \"@raycast/api\";\nimport React from \"react\";\nimport { Preferences } from \"./types/preferences\";\nimport { ActionOpenCommandPreferences } from \"./components/action-open-command-preferences\";\nimport { checkNetworkSpeed } from \"./hooks/hooks\";\nimport { ActionOpenNetworkSpeed } from \"./components/action-open-network-speed\";\n\nexport default function Command() {\n  const { testSequentially } = getPreferenceValues<Preferences>();\n  const { networkSpeedInfo, networkSpeed, networkSpeedLoading, testTime, loading } =\n    checkNetworkSpeed(testSequentially);\n\n  return (\n    <List searchBarPlaceholder=\"Search network speed info\" filtering={false}>\n      <List.EmptyView\n        icon={\"loading/loading.gif\"}\n        title={loading ? \"Testing Your Connection...\" : \"No info\"}\n        description={loading ? networkSpeedLoading : \"\"}\n        actions={\n          <ActionPanel>\n            <ActionOpenCommandPreferences />\n          </ActionPanel>\n        }\n      />\n\n      {!loading && (\n        <List.Section title={\"Time Cost\"} subtitle={testTime + \"s\"}>\n          <List.Item\n            title={{ value: \"Downlink\", tooltip: \"Downlink Capacity\" }}\n            icon={{ source: Icon.Download, tintColor: Color.Blue }}\n            subtitle={networkSpeed?.downloadCapacity}\n            actions={\n              <ActionPanel>\n                <ActionOpenNetworkSpeed value={networkSpeedInfo} />\n              </ActionPanel>\n            }\n          />\n          <List.Item\n            title={{ value: \"Uplink\", tooltip: \"Uplink Capacity\" }}\n            icon={{ source: Icon.Upload, tintColor: Color.Red }}\n            subtitle={networkSpeed?.uploadCapacity}\n            actions={\n              <ActionPanel>\n                <ActionOpenNetworkSpeed value={networkSpeedInfo} />\n              </ActionPanel>\n            }\n          />\n          {!testSequentially && (\n            <List.Item\n              title={{ value: \"RPM\", tooltip: \"Responsiveness\" }}\n              icon={{ source: Icon.Switch, tintColor: Color.Yellow }}\n              subtitle={networkSpeed?.responsiveness}\n              actions={\n                <ActionPanel>\n                  <ActionOpenNetworkSpeed value={networkSpeedInfo} />\n                </ActionPanel>\n              }\n            />\n          )}\n          {testSequentially && (\n            <>\n              <List.Item\n                title={{ value: \"RPM\", tooltip: \"Downlink Responsiveness\" }}\n                icon={{ source: Icon.ArrowDown, tintColor: Color.Green }}\n                subtitle={networkSpeed?.downloadResponsiveness}\n                actions={\n                  <ActionPanel>\n                    <ActionOpenNetworkSpeed value={networkSpeedInfo} />\n                  </ActionPanel>\n                }\n              />\n              <List.Item\n                title={{ value: \"RPM\", tooltip: \"Uplink Responsiveness\" }}\n                icon={{ source: Icon.ArrowUp, tintColor: Color.Orange }}\n                subtitle={networkSpeed?.uploadResponsiveness}\n                actions={\n                  <ActionPanel>\n                    <ActionOpenNetworkSpeed value={networkSpeedInfo} />\n                  </ActionPanel>\n                }\n              />\n            </>\n          )}\n          {networkSpeed?.hasIdleLatency && (\n            <List.Item\n              title={{ value: \"Latency\", tooltip: \"Idle Latency\" }}\n              icon={{ source: Icon.Heartbeat, tintColor: Color.Purple }}\n              subtitle={networkSpeed?.idleLatency}\n              actions={\n                <ActionPanel>\n                  <ActionOpenNetworkSpeed value={networkSpeedInfo} />\n                </ActionPanel>\n              }\n            />\n          )}\n        </List.Section>\n      )}\n    </List>\n  );\n}\n", "import { Action, ActionPanel, Icon, openCommandPreferences } from \"@raycast/api\";\n\nexport function ActionOpenCommandPreferences() {\n  return (\n    <ActionPanel.Section>\n      <Action\n        icon={Icon.Gear}\n        title=\"Configure Command\"\n        shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \",\" }}\n        onAction={openCommandPreferences}\n      />\n    </ActionPanel.Section>\n  );\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport { spawn } from \"child_process\";\nimport { NetworkSpeed } from \"../types/type\";\nimport { extractSpeedLoadingInfo, getNetSpeed } from \"../utils/common-util\";\nimport { Cache } from \"@raycast/api\";\nimport { CacheKey } from \"../utils/constants\";\n\nexport const checkNetworkSpeed = (testSequentially = false) => {\n  const [timeCost, setTimeCost] = useState<string>(\"\");\n  const [networkSpeedInfo, setNetworkSpeedInfo] = useState<string>(\"\");\n  const [networkSpeed, setNetworkSpeed] = useState<NetworkSpeed>();\n  const [networkSpeedLoading, setNetworkSpeedLoading] = useState<string>(\"Takes about 20 seconds\");\n  const [loading, setLoading] = useState<boolean>(true);\n\n  const fetchData = useCallback(async () => {\n    const cache = new Cache();\n    const cacheStr = cache.get(CacheKey.TIME_COST);\n    if (cacheStr && parseInt(cacheStr) > 20) {\n      setNetworkSpeedLoading(`Takes about ${cacheStr} seconds`);\n    }\n\n    const args = testSequentially ? \"-s\" : \"\";\n    const startTimestamp = Date.now();\n    const result = spawn(\"networkQuality\", [args], { shell: true });\n\n    const onData = (data: string) => {\n      const dataString = String(data);\n      const testTime = (Date.now() - startTimestamp) / 1000;\n      setTimeCost(testTime.toFixed(0));\n      cache.set(CacheKey.TIME_COST, testTime.toFixed(0));\n      if (dataString.includes(\"SUMMARY\")) {\n        // Done, get final speed results\n        setNetworkSpeed(getNetSpeed(testSequentially, dataString));\n        setNetworkSpeedInfo(dataString.slice(dataString.indexOf(\"=\")));\n        setLoading(false);\n      } else {\n        // Loading, results returned during speed measurement\n        setNetworkSpeedLoading(extractSpeedLoadingInfo(dataString));\n      }\n    };\n\n    result.stdout.on(\"data\", onData);\n\n    return () => {\n      result.stdout.off(\"data\", onData);\n    };\n  }, []);\n\n  useEffect(() => {\n    let cleanup: (() => void) | undefined;\n\n    fetchData().then((returnedCleanup) => {\n      cleanup = returnedCleanup;\n    });\n\n    return () => {\n      if (cleanup) {\n        cleanup();\n      }\n    };\n  }, [fetchData]);\n\n  return {\n    networkSpeedInfo: networkSpeedInfo,\n    networkSpeed: networkSpeed,\n    networkSpeedLoading: networkSpeedLoading,\n    testTime: timeCost,\n    loading: loading,\n  };\n};\n", "import { NetworkSpeed } from \"../types/type\";\n\nexport function getNetSpeed(testSequentially: boolean, execResult: string) {\n  let network: NetworkSpeed;\n  const finalData = execResult + \"E\";\n  if (execResult.includes(\"Uplink capacity\")) {\n    const uploadCapacity = finalData.match(/Uplink capacity: ([\\s\\S]*?)\\nDownlink capacity/);\n    const idleLatency = finalData.match(/Idle Latency: ([\\s\\S]*?)E/);\n    let downloadCapacity: RegExpMatchArray | null;\n    let responsiveness: RegExpMatchArray | null;\n    let uploadResponsiveness: RegExpMatchArray | null;\n    let downloadResponsiveness: RegExpMatchArray | null;\n    if (testSequentially) {\n      downloadCapacity = finalData.match(/Downlink capacity: ([\\s\\S]*?)\\nUplink Responsiveness/);\n      uploadResponsiveness = finalData.match(/Uplink Responsiveness: ([\\s\\S]*?)\\nDownlink/);\n      downloadResponsiveness = finalData.match(/Downlink Responsiveness: ([\\s\\S]*?)\\nIdle Latency/);\n      responsiveness = null;\n    } else {\n      downloadCapacity = finalData.match(/Downlink capacity: ([\\s\\S]*?)\\nResponsiveness/);\n      responsiveness = finalData.match(/Responsiveness: ([\\s\\S]*?)\\nIdle Latency/);\n      uploadResponsiveness = null;\n      downloadResponsiveness = null;\n    }\n    network = {\n      uploadCapacity: uploadCapacity !== null ? uploadCapacity[1].trim() : \"0 Mbps\",\n      downloadCapacity: downloadCapacity !== null ? downloadCapacity[1].trim() : \"0 Mbps\",\n      uploadResponsiveness: uploadResponsiveness !== null ? uploadResponsiveness[1].trim() : \"0 RPM\",\n      downloadResponsiveness: downloadResponsiveness !== null ? downloadResponsiveness[1].trim() : \"0 RPM\",\n      responsiveness: responsiveness !== null ? responsiveness[1].trim() : \"0 RPM\",\n      idleLatency: idleLatency !== null ? idleLatency[1].trim() : \"0 milli-seconds\",\n      hasIdleLatency: true,\n    };\n  } else {\n    const uploadCapacity = finalData.match(/Upload capacity: ([\\s\\S]*?)\\nDownload capacity/);\n    const downloadCapacity = finalData.match(/Download capacity: ([\\s\\S]*?)\\nUpload flows/);\n    const responsiveness = finalData.match(/Responsiveness: ([\\s\\S]*?)E/);\n    const uploadResponsiveness = finalData.match(/Upload Responsiveness: ([\\s\\S]*?)\\nDownload/);\n    const downloadResponsiveness = finalData.match(/Download Responsiveness: ([\\s\\S]*?)E/);\n    network = {\n      uploadCapacity: uploadCapacity !== null ? uploadCapacity[1].trim() : \"0 Mbps\",\n      downloadCapacity: downloadCapacity !== null ? downloadCapacity[1].trim() : \"0 Mbps\",\n      uploadResponsiveness: uploadResponsiveness !== null ? uploadResponsiveness[1].trim() : \"0 RPM\",\n      downloadResponsiveness: downloadResponsiveness !== null ? downloadResponsiveness[1].trim() : \"0 RPM\",\n      responsiveness: responsiveness !== null ? responsiveness[1].trim() : \"0 RPM\",\n      hasIdleLatency: false,\n    };\n  }\n\n  return network;\n}\n\nexport function extractSpeedLoadingInfo(str: string): string {\n  const tempStr = str.replaceAll(\"responsiveness \", \"\").replaceAll(\"capacity \", \"\");\n  const regex = /Downlink: ([\\d.]+ Mbps).*Uplink: ([\\d.]+ Mbps)/;\n  const match = tempStr.match(regex);\n  if (match) {\n    const downlink = match[1] || \"\";\n    const uplink = match[2] || \"\";\n\n    if (downlink && uplink) {\n      return `Downlink: ${downlink}, Uplink: ${uplink}`;\n    }\n  }\n\n  return \"Takes about 20 seconds\";\n}\n", "import { Action, ActionPanel } from \"@raycast/api\";\nimport { ActionOpenCommandPreferences } from \"./action-open-command-preferences\";\n\nexport function ActionOpenNetworkSpeed(props: { value: string }) {\n  const { value } = props;\n  return (\n    <>\n      <ActionPanel.Section>\n        <Action.CopyToClipboard title=\"Copy Network Speed Info\" content={value} />\n      </ActionPanel.Section>\n      <ActionOpenCommandPreferences />\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": ["test_network_speed_exports", "__export", "Command", "__toCommonJS", "import_api", "import_api", "import_jsx_runtime", "ActionOpenCommandPreferences", "import_react", "import_child_process", "getNetSpeed", "testSequentially", "execResult", "network", "finalData", "uploadCapacity", "idleLatency", "downloadCapacity", "responsiveness", "uploadResponsiveness", "downloadResponsiveness", "extractSpeedLoadingInfo", "str", "tempStr", "regex", "match", "downlink", "uplink", "import_api", "checkNetworkSpeed", "testSequentially", "timeCost", "setTimeCost", "networkSpeedInfo", "setNetworkSpeedInfo", "networkSpeed", "setNetworkSpeed", "networkSpeedLoading", "setNetworkSpeedLoading", "loading", "setLoading", "fetchData", "cache", "cacheStr", "args", "startTimestamp", "result", "onData", "data", "dataString", "testTime", "getNetSpeed", "extractSpeedLoadingInfo", "cleanup", "returnedCleanup", "import_api", "import_jsx_runtime", "ActionOpenNetworkSpeed", "props", "value", "ActionOpenCommandPreferences", "import_jsx_runtime", "Command", "testSequentially", "networkSpeedInfo", "networkSpeed", "networkSpeedLoading", "testTime", "loading", "checkNetworkSpeed", "ActionOpenCommandPreferences", "ActionOpenNetworkSpeed"]
}
